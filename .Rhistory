for (i in 1:100) {
val <- sample(1:11, 1)
sensor2[i] <- possibleValues[val]
}
z <- vector()
for (i in 1:length(sensor1)){
z[i] <- 0.5 * (sensor1[i]+ sensor2[i])
}
#Aufgabe 2b
countValues <- table(z)
for (i in length(countValues)){
verteilungsVektor <- countValues/121
}
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <<- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- vector()
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',10)
test43 <- createVector('u',10)
erg <- 3#wahrVerteilung(test42,test43)
#Aufgabe 2d
plot(erg, main = 'Vergleich der Verteilungen')
#plot(test42, col = 'red', type = 'l')
#plot(test43, col = 'green')
erg
rm(list = ls())
#Aufgabe 2a
possibleValues <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor1 <- rep(0,100)
for (i in 1:100) {
val <- sample(1:11, 1)
sensor1[i] <- possibleValues[val]
}
sensor2 <- rep(0,100)
for (i in 1:100) {
val <- sample(1:11, 1)
sensor2[i] <- possibleValues[val]
}
z <- vector()
for (i in 1:length(sensor1)){
z[i] <- 0.5 * (sensor1[i]+ sensor2[i])
}
#Aufgabe 2b
countValues <- table(z)
for (i in length(countValues)){
verteilungsVektor <- countValues/121
}
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <<- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- vector()
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',10)
test43 <- createVector('u',10)
erg <- wahrVerteilung(test42,test43)
#Aufgabe 2d
plot(erg, main = 'Vergleich der Verteilungen')
#plot(test42, col = 'red', type = 'l')
#plot(test43, col = 'green')
erg
wahrVerteilung(test42, test43)
countValues
ls()
rm(list=ls(all=TRUE))
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <<- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- vector()
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',10)
test43 <- createVector('u',10)
erg <- wahrVerteilung(test42,test43)
erg
countValues
z
test42
test43
z <- vector()
for (i in 1:length(sens1)){
z[i] <<- 0.5 * (sens1[i]+ sens2[i])
}
z <- vector()
for (i in 1:length(test42)){
z[i] <<- 0.5 * (test42[i]+ test43[i])
}
z
z[1] = 3
z
z <- vector()
for (i in 1:length(test42)){
z[i] <- 0.5 * (test42[i]+ test43[i])
}
z
countValues <- table(z)
countValues
test <- countValues
test
test[1] = 1
countValues
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- countValues
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',10)
test43 <- createVector('u',10)
erg <- wahrVerteilung(test42,test43)
erg
erg
plot(erg)
rm(list = ls())
#Aufgabe 2a
possibleValues <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor1 <- rep(0,100)
for (i in 1:100) {
val <- sample(1:11, 1)
sensor1[i] <- possibleValues[val]
}
sensor2 <- rep(0,100)
for (i in 1:100) {
val <- sample(1:11, 1)
sensor2[i] <- possibleValues[val]
}
z <- vector()
for (i in 1:length(sensor1)){
z[i] <- 0.5 * (sensor1[i]+ sensor2[i])
}
#Aufgabe 2b
countValues <- table(z)
for (i in length(countValues)){
verteilungsVektor <- countValues/121
}
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <<- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- vector()
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',10)
test43 <- createVector('u',10)
erg <- wahrVerteilung(test42,test43)
#Aufgabe 2d
plot(erg, main = 'Vergleich der Verteilungen')
#plot(test42, col = 'red', type = 'l')
#plot(test43, col = 'green')
plot(erg)
erg
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- countValues
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',10)
test43 <- createVector('u',10)
erg <- wahrVerteilung(test42,test43)
erg
plot(erg)
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- countValues
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',100)
test43 <- createVector('u',100)
erg <- wahrVerteilung(test42,test43)
plot(erg)
#Augabe 2c
createVector <- function(verteilung, size){
newSensor <- rep(0,size)
for(i in 1:size){
if(verteilung == 'n'){
#Normalverteilung
newSensor[i] = rnorm(1,mean = 0, sd = 1)
}else if(verteilung == 'e'){
#Exponentialverteilung
newSensor[i] = rexp(1, rate = 1)
}else if(verteilung == 'u'){
#Uniform
newSensor[i] = runif(1, min = 0, max = 1)
}else {
print('Verteilung nicht unterstuetzt')
}
}
return(newSensor)
}
wahrVerteilung <- function(sens1, sens2 ){
z <<- vector()
for (i in 1:length(sens1)){
z[i] <- 0.5 * (sens1[i]+ sens2[i])
}
countValues <- table(z)
verteilVektor <- countValues
for (i in 1:length(countValues)){
verteilVektor[i] <- countValues[i]/length(countValues)
}
return(verteilVektor)
}
#test
test42 <- createVector('n',100)
test43 <- createVector('u',100)
erg <- wahrVerteilung(test42,test43)
plot(erg)
erg
rm(list = ls())
sensor1 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor2 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
counter <- 1
z <- vector()
for (i in length(sensor1)){
for (j in length(sensor2)){
z[counter] <- 0.5 * (sensor1[i]+ sensor2[j])
counter <- counter+1
}
}
z
rm(list = ls())
sensor1 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor2 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
counter <- 1
z <- vector()
for (i in length(sensor1)){
for (j in length(sensor2)){
z[counter] <- 0.5 * (sensor1[i]+ sensor2[j])
counter = counter+1
}
}
z
counter
sensor1
length(sensor1)
rm(list = ls())
sensor1 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor2 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
counter <- 1
z <- vector()
for (i in 1:length(sensor1)){
for (j in 1:length(sensor2)){
z[counter] <- 0.5 * (sensor1[i]+ sensor2[j])
counter = counter+1
}
}
z
rm(list = ls())
sensor1 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor2 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
counter <- 1
z <- vector()
for (i in 1:length(sensor1)){
for (j in 1:length(sensor2)){
z[counter] <- 0.5 * (sensor1[i]+ sensor2[j])
counter = counter+1
}
}
countValues <- table(z)
# for (i in length(countValues)){
#     verteilungsVektor <- countValues/121
# }
countValues
length(countValues)
plot(countValues)
plot(countValues, type = 'l')
rm(list = ls())
sensor1 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
sensor2 <- c(-0.5 , -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5)
counter <- 1
z <- vector()
for (i in 1:length(sensor1)){
for (j in 1:length(sensor2)){
z[counter] <- 0.5 * (sensor1[i]+ sensor2[j])
counter = counter+1
}
}
countValues <- table(z)
verteilungsVektor <- countValues/length(z)
verteilungsvektor
verteilungsVektor
plot(verteilungsVektor, type = 'l')
countValues
q()
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2b.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2b.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2b.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2b.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
plot(density(erg))
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
test43 <- createVector('u',100)
lines(density(test43), col = 'green')
lines(density(test42), col = 'red')
return(z)#verteilVektor)
plot(density(erg))
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
#test
test42 <- createVector('e',100)
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe3.R')
test
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2b.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Users/richa/OneDrive/Studium/5. Semester/Verteilte Systeme und Internet der Dinge/Internet der Dinge/aufgabe2c.R')
source('C:/Develop/R/Augabe1_IoT/VM_Data-Messreihen-IoT-/Iot_Prog_Aufagbe1.R')
setwd("C:/Develop/R/Augabe1_IoT/VM_Data-Messreihen-IoT-")
source('C:/Develop/R/Augabe1_IoT/VM_Data-Messreihen-IoT-/Iot_Prog_Aufagbe1.R')
